sensitivityData = {
  data: [
[380,2.6899e-3,2.0000e-4,1.2260e-2],
[385,5.3105e-3,3.9556e-4,2.4222e-2],
[390,1.0781e-2,8.0000e-4,4.9250e-2],
[395,2.0792e-2,1.5457e-3,9.5135e-2],
[400,3.7981e-2,2.8000e-3,1.7409e-1],
[405,6.3157e-2,4.6562e-3,2.9013e-1],
[410,9.9941e-2,7.4000e-3,4.6053e-1],
[415,1.5824e-1,1.1779e-2,7.3166e-1],
[420,2.2948e-1,1.7500e-2,1.0658],
[425,2.8108e-1,2.2678e-2,1.3146],
[430,3.1095e-1,2.7300e-2,1.4672],
[435,3.3072e-1,3.2584e-2,1.5796],
[440,3.3336e-1,3.7900e-2,1.6166],
[445,3.1672e-1,4.2391e-2,1.5682],
[450,2.8882e-1,4.6800e-2,1.4717],
[455,2.5969e-1,5.2122e-2,1.3740],
[460,2.3276e-1,6.0000e-2,1.2917],
[465,2.0999e-1,7.2942e-2,1.2356],
[470,1.7476e-1,9.0980e-2,1.1138],
[475,1.3287e-1,1.1284e-1,9.4220e-1],
[480,9.1944e-2,1.3902e-1,7.5596e-1],
[485,5.6985e-2,1.6987e-1,5.8640e-1],
[490,3.1731e-2,2.0802e-1,4.4669e-1],
[495,1.4613e-2,2.5808e-1,3.4116e-1],
[500,4.8491e-3,3.2300e-1,2.6437e-1],
[505,2.3215e-3,4.0540e-1,2.0594e-1],
[510,9.2899e-3,5.0300e-1,1.5445e-1],
[515,2.9278e-2,6.0811e-1,1.0918e-1],
[520,6.3791e-2,7.1000e-1,7.6585e-2],
[525,1.1081e-1,7.9510e-1,5.6227e-2],
[530,1.6692e-1,8.6200e-1,4.1366e-2],
[535,2.2768e-1,9.1505e-1,2.9353e-2],
[540,2.9269e-1,9.5400e-1,2.0042e-2],
[545,3.6225e-1,9.8004e-1,1.3312e-2],
[550,4.3635e-1,9.9495e-1,8.7823e-3],
[555,5.1513e-1,1.0001,5.8573e-3],
[560,5.9748e-1,9.9500e-1,4.0493e-3],
[565,6.8121e-1,9.7875e-1,2.9217e-3],
[570,7.6425e-1,9.5200e-1,2.2771e-3],
[575,8.4394e-1,9.1558e-1,1.9706e-3],
[580,9.1635e-1,8.7000e-1,1.8066e-3],
[585,9.7703e-1,8.1623e-1,1.5449e-3],
[590,1.0230,7.5700e-1,1.2348e-3],
[595,1.0513,6.9483e-1,1.1177e-3],
[600,1.0550,6.3100e-1,9.0564e-4],
[605,1.0362,5.6654e-1,6.9467e-4],
[610,9.9239e-1,5.0300e-1,4.2885e-4],
[615,9.2861e-1,4.4172e-1,3.1817e-4],
[620,8.4346e-1,3.8100e-1,2.5598e-4],
[625,7.3983e-1,3.2052e-1,1.5679e-4],
[630,6.3289e-1,2.6500e-1,9.7694e-5],
[635,5.3351e-1,2.1702e-1,6.8944e-5],
[640,4.4062e-1,1.7500e-1,5.1165e-5],
[645,3.5453e-1,1.3812e-1,3.6016e-5],
[650,2.7862e-1,1.0700e-1,2.4238e-5],
[655,2.1485e-1,8.1652e-2,1.6915e-5],
[660,1.6161e-1,6.1000e-2,1.1906e-5],
[665,1.1820e-1,4.4327e-2,8.1489e-6],
[670,8.5753e-2,3.2000e-2,5.6006e-6],
[675,6.3077e-2,2.3454e-2,3.9544e-6],
[680,4.5834e-2,1.7000e-2,2.7912e-6],
[685,3.2057e-2,1.1872e-2,1.9176e-6],
[690,2.2187e-2,8.2100e-3,1.3135e-6],
[695,1.5612e-2,5.7723e-3,9.1519e-7],
[700,1.1098e-2,4.1020e-3,6.4767e-7],
[705,7.9233e-3,2.9291e-3,4.6352e-7],
[710,5.6531e-3,2.0910e-3,3.3304e-7],
[715,4.0039e-3,1.4822e-3,2.3823e-7],
[720,2.8253e-3,1.0470e-3,1.7026e-7],
[725,1.9947e-3,7.4015e-4,1.2207e-7],
[730,1.3994e-3,5.2000e-4,8.7107e-8],
[735,9.6980e-4,3.6093e-4,6.1455e-8],
[740,6.6847e-4,2.4920e-4,4.3162e-8],
[745,4.6141e-4,1.7231e-4,3.0379e-8],
// [750,3.2073e-4,1.2000e-4,2.1554e-8],
// [755,2.2573e-4,8.4620e-5,1.5493e-8],
// [760,1.5973e-4,6.0000e-5,1.1204e-8],
// [765,1.1275e-4,4.2446e-5,8.0873e-9],
// [770,7.9513e-5,3.0000e-5,5.8340e-9],
// [775,5.6087e-5,2.1210e-5,4.2110e-9],
// [780,3.9541e-5,1.4989e-5,3.0383e-9],
// [785,2.7852e-5,1.0584e-5,2.1907e-9],
// [790,1.9597e-5,7.4656e-6,1.5778e-9],
// [795,1.3770e-5,5.2592e-6,1.1348e-9],
// [800,9.6700e-6,3.7028e-6,8.1565e-10],
// [805,6.7918e-6,2.6076e-6,5.8626e-10],
// [810,4.7706e-6,1.8365e-6,4.2138e-10],
// [815,3.3550e-6,1.2950e-6,3.0319e-10],
// [820,2.3534e-6,9.1092e-7,2.1753e-10],
// [825,1.6377e-6,6.3564e-7,1.5476e-10],
],
  XYZtoRGB: function(xyz) {
    let M = [
      [ 3.2404542, -1.5371385, -0.4985314],
      [-0.9692660,  1.8760108,  0.0415560],
      [ 0.0556434, -0.2040259,  1.0572252],
    ];
    let rgb = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        rgb[i] += M[i][j]*xyz[j];
      }
    }
    return rgb;
  },
  getColumn: function(col) {
    let result = [];
    for (let i = 0; i < this.data.length; i++) {
      result.push(this.data[i][col])
    }
    return result;
  },
  multiply: function(arr1, arr2) {
    let result = 0;
    for (let i = 0; i < arr1.length; i++) {
      result += arr1[i] * arr2[i];
    }
    return result;
  },
  continueRGB: function(lam) {
    if (lam < this.lambda[0]) {

    }
  },
  getRGB: function(spectrum) {
    let rgb = [0, 0, 0];
    for (let j = 0; j < 3; j++) {
      for (let i = 0; i < this.rgb.length; i++) {
        rgb[j] += this.rgb[i][j] * spectrum[i];
      }
    }
    return rgb;
  },
  init: function() {
    this.lambda = this.getColumn(0);
    this.red    = [];
    this.green  = [];
    this.blue   = [];
    this.rgb    = [];
    for (let i = 0; i < this.lambda.length; i++){
      let xyz = [
        this.data[i][1],
        this.data[i][2],
        this.data[i][3],
      ];
      let rgb = this.XYZtoRGB(xyz);
      rgb[0] = Math.pow(Math.max(rgb[0], 0), 1/2.4);
      rgb[1] = Math.pow(Math.max(rgb[1], 0), 1/2.4);
      rgb[2] = Math.pow(Math.max(rgb[2], 0), 1/2.4);
      this.rgb.push(rgb);
      this.red.push(rgb[0]);
      this.green.push(rgb[1]);
      this.blue.push(rgb[2]);

    }
  }
};

sensitivityData.init();
